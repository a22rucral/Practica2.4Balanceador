{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Practica 2.4 - Proxi Inverso con Blanceo de carga.","text":""},{"location":"#introduccion","title":"Introducci\u00f3n","text":"<p>Los servidores proxy inversos y los balanceadores act\u00faan como intermediarios en la comunicaci\u00f3n entre los clientes y los servidores realizando funciones que mejoran la eficiencia.  Estos dos se ubican entre clientes y servidores, aceptando solicitudes del primero y entregando respuestas del segundo. La implementaci\u00f3n del proxy inverso puede ser posible independientemente del n\u00famero de servidores mientras que el balanceador requiere un m\u00ednimo de dos. Este es la cara p\u00fablica del servidor, se encarga de aceptar solicitudes de los navegadores. </p> <p>Los balanceadores con mayor frecuencia se encarga de distribuir peticiones entre varios servidores, ya que ser\u00edan demasiado volumen de solicitudes para un solo servidor. Esto tambi\u00e9n hace que en caso de fallo de un servidor, el otro siga siendo funcional. </p>"},{"location":"#tarea","title":"Tarea:","text":"<p>Configurar dos servidores Nginx con dos m\u00e1quinas Debian, adem\u00e1s utilizaremos el proxy inversio configurado en la pr\u00e1ctica anterior. </p> <p>Como resultado de la p\u0155actica, al acceder al balanceador, nos ir\u00e1 redirigiendo a los dos servidores configurados. </p>"},{"location":"#configuraciones","title":"Configuraciones","text":""},{"location":"#nginx-servidor-web-1","title":"Nginx Servidor web 1.","text":"<p>Primero deberemos cambiar la configuraci\u00f3n de salida. Antes ten\u00edamos la de 'static-example' descargada de github. Ahora crearemos un index.html sencillo en la carpeta /var/www/webserver/html que nos dar\u00e1 informaci\u00f3n de en que servidor estamos en cada momento para confirmar el funcionamiento del balanceador.  Nos iremos a la carpeta.</p> <p></p> <p>Y mediante el comando ** sudo nano index.html** crearemos el archivo y lo editaremos de la siguiente manera. </p> <p></p> <p>En el archivo de configuranci\u00f3n del servidor en el directorio sites-avaliable mantendremos la configuraci\u00f3n. Escuchar\u00e1 por el puerto 8080 y a\u00f1adiremos una cabecera que se llame \"serv_web1_Alejandro\".  Con el siguiente comando. Dentro del bloque location de tu archivo de configuracion. </p> <pre><code>add header Host serv_web1_Alejandro\n</code></pre> <p>Al querer mostrar otro index.html que el que estabamos mostrando, tambi\u00e9n cambiaremos las siguientes l\u00edneas del archivo de configuraci\u00f3n de vuestro servidor indicando la ruta del index.html. </p> <p></p> <p>Al entrar en el servidor nos mostrar\u00e1 esta p\u00e1gina: </p> <p></p>"},{"location":"#nginx-servidor-web-2","title":"Nginx Servidor web 2.","text":"<p>Esto lo repetiremos con el segundo servidor.  Para ello habr\u00e1 que clonarlo, indicaremos que cree nuevas direcciones IP.  Modificaremos el index.html ubicado en la misma carpeta de la siguiente manera: </p> <p></p> <p>Y le cambiaremos el nombre de webserver a webserver2 en todos los nomnbres que conlleve.  - Ruta /var/www/webserver  - Archivo de configuraci\u00f3n webserver2 - Dentro del archivo, l\u00edneas server_name</p> <p>No podemos olvidarnos de hacer el link simb\u00f3lico de sites-enables a sites-avaliable con el siguiente comando : </p> <pre><code>sudo ln -s /etc/nginx/sites-available/tu-sitio /etc/nginx/sites-enabled/\n</code></pre> <p>Al listar los elementos de sites-enables nos debe de salir as\u00ed; </p> <p></p> <p>Al comprobar el servidor nos debe dar la siguiente salida. </p> <p></p>"},{"location":"#nginx-balanceador","title":"Nginx Balanceador.","text":"<p>Cambiaremos el archivo de configuraci\u00f3n del que era nuestro proxy anteriormente para hacerlo un balanceador de la siguiente manera : </p> <p> </p> <p>Bloque upstream backend_hosts: - Upstream es una directiva que define un grupo de servidores que pueden manejar solicitudes, lo llamamos backend_hosts. - Random : Estrategia de balanceo de carga que elige al azar uno de los dos servidores.  - Los servidores disponibles a recibir solicitudes. </p> <p>Bloque server: - Define la configuracion de un servidor virtual en Nginx.  - Listen 80, especifica que el servidor escucha el puerto 80. - Dentro de este bloque definimos el bloque location que establece como se manejan las solicitudes para la ra\u00edz del servidor. - El proxy_pass redirige las solicitudes al grupo de servidores antes definido. </p> <p>Tras esta configuraci\u00f3n solo quedar\u00e1 la comprobaci\u00f3n.  Utilizando la ip del balanceador : 192.168.68.143  y presionando el F5, nos ir\u00e1 mostrando simultaneamente la salida de cada uno de los servidores. </p> <p></p> <p></p>"},{"location":"#cuestiones","title":"Cuestiones.","text":""},{"location":"#cuestion-1","title":"Cuesti\u00f3n 1:","text":"<p>Busca informaci\u00f3n de qu\u00e9 otros m\u00e9todos de balanceo se pueden aplicar con Nginx y describe al menos 3 de ellos.</p> <ol> <li>Round Robin: Es el m\u00e9todo predeterminado y el mas simple. Distribuye las solicitudes de manera c\u00edclica y uniforme, recibiendo todos un n\u00famero similar de solicitudes. </li> <li>Least Connections: Este m\u00e9todo asigna la solicitud al servidor con menos conexiones activas, lo que ayuda a mantener el balance si algunos est\u00e1n mas sobrecargados. </li> <li>IP Hash: Este m\u00e9todo asiga las solicitudes en funci\u00f3n de la direcci\u00f3n IP del cliente. Esto hace que el mismo usuario solo se conecta a uan IP, clave para mantener la persistencia de sesi\u00f3n. </li> </ol>"},{"location":"#cuestion-2","title":"Cuestion 2:","text":"<p>Si quiero a\u00f1adir 2 servidores web m\u00e1s al balanceo de carga, describe detalladamente qu\u00e9 configuraci\u00f3n habr\u00eda que a\u00f1adir y d\u00f3nde. La soluci\u00f3n a esto, es dentro del bloque upstream, le indicamos los dos servidores extras, debajo de los otros dos que ya tenemos, de forma que en vez de repartir entre 2 repartir\u00eda las peticiones entre 4. Quedar\u00eda de tal forma. </p> <pre><code>    upstream backend_hosts {\n                random;\n                server ________:____;\n                server ________:____;\n                server ________:____;\n                server ________:____;\n    }\n            server {\n                listen 80;\n                server_name ________;      \n                location / {\n                    proxy_pass http://backend_hosts;\n                }\n            }\n\n</code></pre> <p>Esa ser\u00eda la estructura a seguir. </p>"}]}